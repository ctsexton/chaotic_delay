####################################################################################################
# CMakeLists file for ChaoticDelay
# Generated by Cam Sexton
# 2021-01-17
####################################################################################################

####################################################################################################
# basic project config
cmake_minimum_required(VERSION 3.5)
set(project_name "ChaoticDelay")
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake_modules ${CMAKE_MODULE_PATH})
set(CMAKE_CXX_STANDARD 14)

####################################################################################################
# JUCE
add_subdirectory(${CMAKE_SOURCE_DIR}/lib/JUCE)

add_library(my_plugin_modules STATIC)

target_link_libraries(my_plugin_modules
    PRIVATE
        juce::juce_dsp
        # If you're using your own JUCE-style modules,
        # you should link those here too
    PUBLIC
        juce::juce_recommended_config_flags
        juce::juce_recommended_lto_flags
        juce::juce_recommended_warning_flags)

set_property(TARGET my_plugin_modules PROPERTY POSITION_INDEPENDENT_CODE ON)

# We're linking the modules privately, but we need to export
# their compile flags
target_compile_definitions(my_plugin_modules
    PUBLIC
        JUCE_WEB_BROWSER=0
        JUCE_USE_CURL=0
        JucePlugin_Build_Standalone=1
        JUCE_STANDALONE_APPLICATION=JucePlugin_Build_Standalone
    INTERFACE
        $<TARGET_PROPERTY:my_plugin_modules,COMPILE_DEFINITIONS>)

# We also need to export the include directories for the modules
target_include_directories(my_plugin_modules
    INTERFACE
        $<TARGET_PROPERTY:my_plugin_modules,INCLUDE_DIRECTORIES>)

####################################################################################################
# load modules
include(SuperColliderServerPlugin RESULT_VARIABLE server_plugin_found)
if(NOT server_plugin_found)
    message(FATAL_ERROR "Could not find server plugin functions module")
endif()

include(SuperColliderCompilerConfig RESULT_VARIABLE compiler_config_found)
if(NOT compiler_config_found)
    message(FATAL_ERROR "Could not find compiler config module")
endif()

# Windows - puts redistributable DLLs in install directory
include(InstallRequiredSystemLibraries)

sc_check_sc_path("${SC_PATH}")
message(STATUS "Found SuperCollider: ${SC_PATH}")
set(SC_PATH "${SC_PATH}" CACHE PATH
    "Path to SuperCollider source. Relative paths are treated as relative to this script" FORCE)

include("${SC_PATH}/SCVersion.txt")
message(STATUS "Building plugins for SuperCollider version: ${SC_VERSION}")

# set project here to avoid SCVersion.txt clobbering our version info
project(${project_name})
sc_do_initial_compiler_config() # do after setting project so compiler ID is available

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT OR NOT CMAKE_INSTALL_PREFIX)
    message(WARNING "No install prefix provided, defaulting to $BUILD_DIR/install")
    set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/install" CACHE PATH "Install prefix" FORCE)
endif()

message(STATUS "Install directory set to: ${CMAKE_INSTALL_PREFIX}")

####################################################################################################
# options
option(SUPERNOVA "Build plugins for supernova" ON)
option(SCSYNTH "Build plugins for scsynth" ON)
option(NATIVE "Optimize for native architecture" OFF)
option(STRICT "Use strict warning flags" OFF)
option(NOVA_SIMD "Build plugins with nova-simd support." ON)

####################################################################################################
# include libraries

if (NOVA_SIMD)
	add_definitions(-DNOVA_SIMD)
	include_directories(${SC_PATH}/external_libraries/nova-simd)
endif()

####################################################################################################
# Begin target ChaoticDelay

set(ChaoticDelay_cpp_files
    src/ChaoticDelay/ChaoticDelay.cpp
    src/ChaoticDelay/ChaoticDelay.h
    src/ChaoticDelay/BufferWriter.cpp
    src/ChaoticDelay/BufferWriter.h
)
set(ChaoticDelay_sc_files
    src/ChaoticDelay/ChaoticDelay.sc
)
set(ChaoticDelay_schelp_files
    src/ChaoticDelay/ChaoticDelay.schelp
)

function(sc_add_server_plugin_properties target is_supernova)
    set_target_properties(${target} PROPERTIES
        CXX_VISIBILITY_PRESET hidden
        PREFIX ""
    )

    if(APPLE OR WIN32)
        set_target_properties(${target} PROPERTIES SUFFIX ".scx")
    endif()

    target_include_directories(${target} PUBLIC
        ${SC_PATH}/include/plugin_interface
        ${SC_PATH}/include/common
        ${SC_PATH}/common
        ${CMAKE_SOURCE_DIR}/lib/JUCE/modules
    )

    target_link_libraries(${target} PUBLIC
        my_plugin_modules
    )

    # from CompilerConfig module
    sc_config_compiler_flags(${target})

    target_compile_definitions(${target} PRIVATE $<$<BOOL:${is_supernova}>:SUPERNOVA>)

    list(APPEND all_sc_server_plugins ${target})
    set(all_sc_server_plugins ${all_sc_server_plugins} PARENT_SCOPE)
endfunction()

function(sc_add_server_plugin dest_dir name cpp sc schelp)
    if(SCSYNTH)
        set(sy_name "${name}_scsynth")
        add_library(${sy_name} MODULE "${cpp}")
        install(TARGETS ${sy_name} LIBRARY DESTINATION ${dest_dir})
        sc_add_server_plugin_properties(${sy_name} FALSE)
        message(STATUS "Added server plugin target ${sy_name}")
    endif()

    if(sc)
        install(FILES ${sc} DESTINATION ${dest_dir}/Classes)
    endif()
    if(schelp)
        install(FILES ${schelp} DESTINATION ${dest_dir}/HelpSource/Classes)
    endif()
endfunction()

sc_add_server_plugin(
    "ChaoticDelay/ChaoticDelay" # desination directory
    "ChaoticDelay" # target name
    "${ChaoticDelay_cpp_files}"
    "${ChaoticDelay_sc_files}"
    "${ChaoticDelay_schelp_files}"
)

# End target ChaoticDelay
####################################################################################################

####################################################################################################
# END PLUGIN TARGET DEFINITION
####################################################################################################

message(STATUS "Generating plugin targets done")
